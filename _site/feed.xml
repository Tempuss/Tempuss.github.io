<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-09-20T23:37:15+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tempuss Blog</title><subtitle>보안하는 개발자</subtitle><entry><title type="html"></title><link href="http://localhost:4000/2021/09/20/2019-09-25-A-preliminary-analysis-of-vulnerability-scores-for-attacks-in-wild-the-Ekits-and-sym-datasets.html" rel="alternate" type="text/html" title="" /><published>2021-09-20T23:37:15+09:00</published><updated>2021-09-20T23:37:15+09:00</updated><id>http://localhost:4000/2021/09/20/2019-09-25-A%20preliminary%20analysis%20of%20vulnerability%20scores%20for%20attacks%20in%20wild:%20the%20Ekits%20and%20sym%20datasets</id><content type="html" xml:base="http://localhost:4000/2021/09/20/2019-09-25-A-preliminary-analysis-of-vulnerability-scores-for-attacks-in-wild-the-Ekits-and-sym-datasets.html">&lt;h2 id=&quot;아래-글은-bob-8기의-terrarium-팀의-산출물-일부-입니다&quot;&gt;아래 글은 BoB 8기의 Terrarium 팀의 산출물 일부 입니다.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Created: September 25, 2019 5:07 PM&lt;/li&gt;
  &lt;li&gt;Quality: Good, 완료&lt;/li&gt;
  &lt;li&gt;담당자: 지용빈&lt;/li&gt;
  &lt;li&gt;연도: 2012&lt;/li&gt;
  &lt;li&gt;인용횟수: 51&lt;/li&gt;
  &lt;li&gt;출처: 2012 ACM Workshop on Building Analysis Datasets and Gathering Experience Returns for Security&lt;/li&gt;
  &lt;li&gt;파일: https://www.win.tue.nl/~lallodi/allodi-12-badgers.pdf&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;한줄요약&quot;&gt;한줄요약&lt;/h2&gt;

&lt;p&gt;EKITS(black market exploit으로 구축한 Exploit-kits)및 SYM(Symantec’s Threat Database)에서 추출한 정보를 기반으로 NVD(National Vulnerability Database)와 EDB(Exploit-DB)에 공개된 취약점들의 스코어링에 대한 검증&lt;/p&gt;

&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;NVD와 EDB는 실제 exploits과 비교했을때 믿을만한 정보들이 아니다.&lt;/strong&gt;
(cvss와 exploitability subscore 조정했을때도)&lt;/p&gt;

&lt;p&gt;black market의 EKTIS가 CVSS점수 Medium ~ High 일 경우에도 엄청나게 민감(실제 공격 예측도)하다는것을 보여준다(&lt;strong&gt;CVSS 점수가 높아도 실제로 reliable 하지는 않다는것&lt;/strong&gt;)&lt;/p&gt;

&lt;h2 id=&quot;목적&quot;&gt;목적&lt;/h2&gt;

&lt;p&gt;현존하는 exploits Database 들에 대한 취약점 스코어링 신뢰도 분석&lt;/p&gt;

&lt;h2 id=&quot;특장점&quot;&gt;특장점&lt;/h2&gt;

&lt;p&gt;CVSS 스코어링이 실제로 얼마나 reliable 하고 믿을만 한지 검증함&lt;/p&gt;

&lt;p&gt;일반적으로 CVSS관련 논문들이 NVD와 EDB를 신뢰한다는 전제하에 논문을 쓰는데 그 NVD와 EDB를 신뢰하지 않는 다는 관점에서 아주 흥미로움&lt;/p&gt;

&lt;p&gt;실제 블랙마켓에서 수집한 취약점 103개를 EKITS라 칭하고 SYM과 함께 검증 데이터 셋으로 사용함
(실제 블랙마켓읠 Exploits에 대한 DB를 구축했다는 점)&lt;/p&gt;

&lt;p&gt;White/Black/Wild 처럼 다양한 분야에서의 취약점을 수집함&lt;/p&gt;

&lt;h2 id=&quot;한계점&quot;&gt;한계점&lt;/h2&gt;

&lt;p&gt;직접 수집한 EKITS의 개수가 적고 실제 어떤 데이터 인지 확인할 수 없음&lt;/p&gt;

&lt;p&gt;CVSS의 exploitability factor중 access vector에 대해서 의문점을 던짐(거의 모든 취약점들이 원격이고 추가적인 인증과정이 없기때문)&lt;/p&gt;

&lt;h2 id=&quot;발전-방향&quot;&gt;발전 방향&lt;/h2&gt;</content><author><name></name></author></entry><entry><title type="html">HTTP-2</title><link href="http://localhost:4000/web/2021/09/20/HTTP-2.html" rel="alternate" type="text/html" title="HTTP-2" /><published>2021-09-20T23:05:00+09:00</published><updated>2021-09-20T23:05:00+09:00</updated><id>http://localhost:4000/web/2021/09/20/HTTP-2</id><content type="html" xml:base="http://localhost:4000/web/2021/09/20/HTTP-2.html">&lt;h1 id=&quot;http2&quot;&gt;HTTP/2&lt;/h1&gt;

&lt;h2 id=&quot;http2란&quot;&gt;HTTP/2란?&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP/2는 Hypertext Transfer Protocol Version 2의 약자로 IETF년에 새로 규정된 차기 HTTP 버전이다&lt;/li&gt;
  &lt;li&gt;SPDY(스피디/speedy로 발음)라는 구글의 비표준 개방형 네트워크 프로토콜에 기반한다. 기존의 HTTP methods, status codes, semantics 개념들이 동일하게 호환된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frame-구조&quot;&gt;Frame 구조&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%202%202a41f2d5837e4883b9a9ae419977973a/Untitled.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기존의 HTTP/1.1 은 plain text형태로 데이터를 전송하지만 HTTP/2는 바이너리 포멧으로 인코딩 된 Message, Frame으로 구성되어 전송된다&lt;/li&gt;
  &lt;li&gt;기존의 HTTP/1.1 Header는 &lt;code class=&quot;highlighter-rouge&quot;&gt;HEADERS Type Frame&lt;/code&gt; 에, body내용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;DATA Type Frame&lt;/code&gt; 에 해당한다&lt;/li&gt;
  &lt;li&gt;Frame: HTTP/2에서 통신의 최소 단위. 각 최소 단위에는 하나의 프레임 헤더가 포함된다. 이 프레임 헤더는 최소한으로 프레임이 속하는 스트림을 식별한다. HEADERS Type Frame, DATA Type Frame이 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stream-구조&quot;&gt;Stream 구조&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%202%202a41f2d5837e4883b9a9ae419977973a/Untitled%201.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stream: 구성된 연결 내에서 전달되는 바이트의 양방향 흐름, 하나 이상의 메시지가 전달 가능하다&lt;/li&gt;
  &lt;li&gt;Message: 논리적 요청 또는 응답 메시지에 매핑되는 프레임의 전체 시퀀스이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;HTTP Header Data Compression&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Header중복 전송을 막기 위해 Huffman Coding을 사용하는 HPACK이라는 압축방식으로 변환해 전송하는 특징&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;첫 stream에서만 Header를 전송하구 이후 stream에서는 전송을 하지 않음&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%202%202a41f2d5837e4883b9a9ae419977973a/Untitled%202.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Server Push&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;서버에서 클라이언트가 요청하지 않은 자원(css,js,img)등에 대해서도 한번에 리턴할 수 있음&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%202%202a41f2d5837e4883b9a9ae419977973a/Untitled%203.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTTP 1.x의 HOL(Head-of-Line) Blocking 문제 해결&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;HTTP/1.1이하에서는 한번에 하나의 파일만 전송 가능했지만 이때문에 앞의 파일이 느려질 경우 뒤에가 모두 느려지는 문제가 있었음. HTTP/2 에서는 여러 파일을 병렬로 전송 할 수 있다&lt;/li&gt;
      &lt;li&gt;TCP 연결 하나로 모든 요청과 응답들을 병렬로 보낼수 있게됨&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%202%202a41f2d5837e4883b9a9ae419977973a/Untitled%204.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Stream 우선순위&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;HTTP가 많은 프레임으로 분리되어 전송되면서 여러 스트림의 프레임이 다중화됨에 따라 스트림에 우선순위를 부여하여 전송할 수 있도록 되었음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/fundamentals/performance/http2?hl=ko&quot;&gt;HTTP/2 소개&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@ziyoonee/HTTP1-%EB%B6%80%ED%84%B0-HTTP3-%EA%B9%8C%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0&quot;&gt;HTTP-1부터-HTTP-3까지&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%97%88%ED%94%84%EB%A8%BC_%EB%B6%80%ED%98%B8%ED%99%94&quot;&gt;Huffman Coding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Web" /><summary type="html">HTTP/2</summary></entry><entry><title type="html">HTTP-1.1</title><link href="http://localhost:4000/web/2021/09/20/HTTP-1.1.html" rel="alternate" type="text/html" title="HTTP-1.1" /><published>2021-09-20T23:05:00+09:00</published><updated>2021-09-20T23:05:00+09:00</updated><id>http://localhost:4000/web/2021/09/20/HTTP-1.1</id><content type="html" xml:base="http://localhost:4000/web/2021/09/20/HTTP-1.1.html">&lt;h1 id=&quot;http-11&quot;&gt;HTTP 1.1&lt;/h1&gt;

&lt;h3 id=&quot;http란&quot;&gt;HTTP란?&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP(HyperText Transfer Protocol)의 약자로서  HTML 문서와 같은 리소스들을 가져올 수 있도록 해주는 TCP 기반 프로토콜&lt;/li&gt;
  &lt;li&gt;HTTP는 웹에서 이루어지는 모든 데이터 교환의 기초이며, 클라이언트-서버 프로토콜&lt;/li&gt;
  &lt;li&gt;HTTP 문서에는 비디오, 이미지, 텍스트, layout등의 하위문서로 구성됨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%201%201%2007031b307ca04e8098b3c515f644250c/Untitled.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;http-프로토콜&quot;&gt;HTTP 프로토콜&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%201%201%2007031b307ca04e8098b3c515f644250c/Untitled%201.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP는 Application 계층의 프로토콜로서 TCP혹은 암호화된 TCP인 TLS를 통해 전송 됨&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;http-프로토콜의-작동-순서&quot;&gt;HTTP 프로토콜의 작동 순서&lt;/h3&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;브라우저 상에서 naver.com에 접속한다&lt;/li&gt;
  &lt;li&gt;브라우저는 사용자 PC의 로컬 DNS(/etc/host)에 등록되어 있을경우 해당 서버의 IP로 요청을 날린다&lt;/li&gt;
  &lt;li&gt;로컬 DNS에 없을 경우 DNS프로토콜을 이용해 Domain 서버에 해당 도메인명이 어떤 IP들과 매핑되어 있는지 질의한다&lt;/li&gt;
  &lt;li&gt;naver.com의 IP를 얻어 온 후 해당 서버로 요청을 날린다&lt;/li&gt;
  &lt;li&gt;해당 서버의 Web Server에서 요청한 자원에 대해서 응답값과 함께 컨텐츠를 response한다&lt;/li&gt;
  &lt;li&gt;브라우저 상에서 해당 요청의 response값을 분석해서 사용자에게 출력한다(이미지, 텍스트,css)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%201%201%2007031b307ca04e8098b3c515f644250c/Untitled%202.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;https-프로토콜-작동-순서&quot;&gt;HTTPS 프로토콜 작동 순서&lt;/h3&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;브라우저 상에서 naver.com에 접속한다&lt;/li&gt;
  &lt;li&gt;브라우저는 사용자 PC의 로컬 DNS(/etc/host)에 등록되어 있을경우 해당 서버의 IP로 요청을 날린다&lt;/li&gt;
  &lt;li&gt;로컬 DNS에 없을 경우 DNS프로토콜을 이용해 Domain 서버에 해당 도메인명이 어떤 IP들과 매핑되어 있는지 질의한다&lt;/li&gt;
  &lt;li&gt;naver.com의 IP를 얻어 온 후 해당 서버로 요청을 날린다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버와 클라이언트 간에 암호화를 이용한 암호화 과정이 진행된다&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%201%201%2007031b307ca04e8098b3c515f644250c/Untitled%203.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;해당 서버의 Web Server에서 요청한 자원에 대해서 응답값과 함께 컨텐츠를 response한다&lt;/li&gt;
  &lt;li&gt;브라우저 상에서 해당 요청의 response값을 분석해서 사용자에게 출력한다(이미지, 텍스트,css)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;http의-단점&quot;&gt;HTTP의 단점&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;HOLB(Head Of Line Blocking)
    &lt;ul&gt;
      &lt;li&gt;순차적으로 요청을 받아야 하다 보니 앞의 요청이 끝나지 않으면 뒤의 요청을 처리 할수가 없는 이슈&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RTT(Round Trip Time)
    &lt;ul&gt;
      &lt;li&gt;request를 할때마다 Handshake가 발생하기 때문에 불필요한 RTT가 발생한다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;무거운 Header 구조
    &lt;ul&gt;
      &lt;li&gt;cookie, authorization등 다양한 헤더를 포함하고 있어 트래픽에 부담이 된다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@ziyoonee/HTTP1-%EB%B6%80%ED%84%B0-HTTP3-%EA%B9%8C%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0&quot;&gt;HTTP/1 부터 HTTP/3 까지 알아보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@taesunny/HTTP2HTTP-2.0-%EC%A0%95%EB%A6%AC&quot;&gt;HTTP/2(HTTP 2.0) 정리&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP&quot;&gt;HTTP의 진화&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616.html&quot;&gt;Hypertext Transfer Protocol – HTTP/1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Overview&quot;&gt;HTTP 개요&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://reakwon.tistory.com/106&quot;&gt;[네트워크/보안] TLS(SSL) 개념과 기본 동작 원리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Web" /><summary type="html">HTTP 1.1</summary></entry><entry><title type="html">HTTP-3&amp;amp;QUIC</title><link href="http://localhost:4000/web/2021/09/20/HTTP-3&QUIC.html" rel="alternate" type="text/html" title="HTTP-3&amp;QUIC" /><published>2021-09-20T23:05:00+09:00</published><updated>2021-09-20T23:05:00+09:00</updated><id>http://localhost:4000/web/2021/09/20/HTTP-3&amp;QUIC</id><content type="html" xml:base="http://localhost:4000/web/2021/09/20/HTTP-3&amp;QUIC.html">&lt;h1 id=&quot;http3--quic&quot;&gt;HTTP/3 &amp;amp; QUIC&lt;/h1&gt;

&lt;h3 id=&quot;quic-protocol&quot;&gt;QUIC Protocol&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Quick UDP Internet Connections의 약자로서 구글이 개발한 UDP 기반에서 구현한 전송 프로토콜&lt;/li&gt;
  &lt;li&gt;즉 UDP 프로토콜을 커스텀하여 속도와 TCP의 연결성을 확보한 프로토콜&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;구조&quot;&gt;구조&lt;/h2&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;UDP는 일반적으로 연결성을 지향하지 않지만 UDP 프로토콜의 유연함을 이용하여 QUIC 계층을 추가하여 TCP와 같은 신뢰성을 확보한 프로토콜&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%203%20&amp;amp;%20QUIC%206626e80d84ac444eb6a1b78186f96d39/Untitled.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;특징&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;전송-속도-향상&quot;&gt;전송 속도 향상&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;QUIC 프로토콜은 UDP기반의 프로토콜이기 때문에 RTT가 0이므로 속도적인 면에서 빠르고 오버헤드가 TCP에 비해 감소했음&lt;/li&gt;
  &lt;li&gt;QUIC 프로토콜은 Connection UUID 고유 패킷 식별자를 발급하여 한번이라도 발급할 경우 이동중 로밍이나 IP 변경이 발생 하더라도 커넥션을 다시 수립 할 필요가 없음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/HTTP%203%20&amp;amp;%20QUIC%206626e80d84ac444eb6a1b78186f96d39/Untitled%201.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;보안성-향상&quot;&gt;보안성 향상&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;TLS 암호화가 기본적으로 제공됨&lt;/li&gt;
  &lt;li&gt;IP Spoofing / Replay Attack 방지
    &lt;ul&gt;
      &lt;li&gt;QUIC에서는 필요에 따라 Source Address Token을 발급하여 출발지 아이피를 변조 및 재생공격에 대한 검증을 수행함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;멀티플렉싱multiplexing&quot;&gt;&lt;strong&gt;멀티플렉싱(multiplexing)&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;단일 채널을 통해 여러 데이터를 보내는 멀티 플렉싱 기능을 제공함
&lt;em&gt;**&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;향상된-오류정정&quot;&gt;&lt;strong&gt;향상된 오류정정&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;QUIC은 전방 오류정정 FEC(Forward Error Correction) 방식을 이용하여 패킷이 전송 중 변조나 훼손이 발생했을 경우 정정비트를 통해 훼손된 비트를 복구하도록 설계되었습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/QUIC&quot;&gt;QUIC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devahea.github.io/2019/04/30/5G-%EC%B4%88%EC%97%B0%EA%B2%B0%EC%8B%9C%EB%8C%80%EC%97%90-%EC%9B%B9-HTTP%EC%9D%98-%EB%8C%80%EC%95%88%EC%9D%80-QUIC/&quot;&gt;QUIC 소개&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.naver.com/PostView.nhn?blogId=renucs&amp;amp;logNo=220887163028&quot;&gt;QUIC 프로토콜&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.chromium.org/quic&quot;&gt;QUIC&lt;/a&gt; 공식 문서&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://musclebear.tistory.com/51&quot;&gt;[Protocol] QUIC 프로토콜이 뭐지?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@wsong0101/QUIC%EC%9D%84-%ED%96%A5%ED%95%9C-%EC%97%AC%EC%A0%95%EB%B2%88%EC%97%AD&quot;&gt;QUIC을 향한 여정(번역)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.saturnsoft.net/network/2019/03/21/quic-http3-1/&quot;&gt;QUIC과 HTTP/3 - 1. UDP기반 전송 프로토콜의 대두&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.saturnsoft.net/network/2019/03/26/quic-http3-2/&quot;&gt;QUIC과 HTTP/3 - 2. 기존의 성능 개선 기법 및 한계&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.saturnsoft.net/network/2019/08/11/http3-curl-quiche/&quot;&gt;QUIC과 HTTP/3 - 3. curl + quiche 로 HTTP3 요청해 보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1WJvyZflAO2pq77yOLbp9NsGjC1CHetAXV8I0fQe-B_U/edit?pli=1#&quot;&gt;QUIC 프로토콜 공식 스펙&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ykarma1996.tistory.com/86&quot;&gt;HTTP/3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Web" /><summary type="html">HTTP/3 &amp;amp; QUIC</summary></entry><entry><title type="html">ML Ops</title><link href="http://localhost:4000/data-engineering/2021/09/05/ML-Ops.html" rel="alternate" type="text/html" title="ML Ops" /><published>2021-09-05T21:17:00+09:00</published><updated>2021-09-05T21:17:00+09:00</updated><id>http://localhost:4000/data-engineering/2021/09/05/ML%20Ops</id><content type="html" xml:base="http://localhost:4000/data-engineering/2021/09/05/ML-Ops.html">&lt;h1 id=&quot;ml-ops&quot;&gt;ML Ops&lt;/h1&gt;

&lt;h3 id=&quot;정의&quot;&gt;정의&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Machine Learning Operations의 약자로서 머신러닝의 지속적 배포 및 자동화 파이프라인을 의미한다&lt;/li&gt;
  &lt;li&gt;ML Ops = 머신러닝 엔지니어링 + 데이터 엔지니어링 + 인프라&lt;/li&gt;
  &lt;li&gt;머신러닝 모델 개발과 머신러닝 모델 운영에서 사용되는 문제, 반복을 최소화하는것이 목표&lt;/li&gt;
  &lt;li&gt;머신러닝 모델 개발과 머신러닝 운영 Workflow의 간극을 줄이기 위한 분야&lt;/li&gt;
  &lt;li&gt;Model Development와 Model Prediction으로 나누는 관점으로도 볼 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ML%20Ops%20d9f536b79cba4b2d8cd26fa30ef0597a/Untitled.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;research에서의-머신러닝-프로세스&quot;&gt;Research에서의 머신러닝 프로세스&lt;/h3&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;문제 정의&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eda-ai-lab.tistory.com/13&quot;&gt;EDA&lt;/a&gt;(Exploratory Data Analysis)&lt;/li&gt;
  &lt;li&gt;Feature 생성&lt;/li&gt;
  &lt;li&gt;모델 학습&lt;/li&gt;
  &lt;li&gt;예측&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;production에서의-머신러닝-프로세스&quot;&gt;Production에서의 머신러닝 프로세스&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;머신러닝 모델을 실제 서비스화하는 과정을 Production으로 운영하는것&lt;/li&gt;
  &lt;li&gt;학습시 사용한 데이터와 실데이터가 상이할 수 있음&lt;/li&gt;
  &lt;li&gt;학습 모델이 production에서 유효하지 않을 수 있음&lt;/li&gt;
  &lt;li&gt;수 많은 예외 케이스 발생 가능&lt;/li&gt;
  &lt;li&gt;인프라 레벨의 문제 발생 및 장애 대응 프로세스 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;사용-기술&quot;&gt;사용 기술&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ML%20Ops%20d9f536b79cba4b2d8cd26fa30ef0597a/Untitled%201.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실제 ML Ops에서 ML 코드는 수많은 기능 중 하나일 뿐이다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mlops-수준-2-cicd-파이프라인-자동화-google이-설명하는-ml-ops&quot;&gt;MLOps 수준 2: CI/CD 파이프라인 자동화 (Google이 설명하는 ML Ops)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ML%20Ops%20d9f536b79cba4b2d8cd26fa30ef0597a/Untitled%202.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;nvida의-ml-ops-파이프라인&quot;&gt;Nvida의 ML Ops 파이프라인&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ML%20Ops%20d9f536b79cba4b2d8cd26fa30ef0597a/Untitled%203.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;머신러닝-파이프라인&quot;&gt;머신러닝 파이프라인&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ML%20Ops%20d9f536b79cba4b2d8cd26fa30ef0597a/Untitled%204.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;머신러닝-vs-devops-vs-데이터-엔지니링&quot;&gt;머신러닝 vs DevOps vs 데이터 엔지니링?&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ML%20Ops%20d9f536b79cba4b2d8cd26fa30ef0597a/Untitled%205.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Machine Learning : Feature생성, 모델 학습 및 예측을 하는 머신러닝&lt;/li&gt;
  &lt;li&gt;DevOps :  서버 인프라 자동화 및 오케스트레이션을 담당하는 DevOps&lt;/li&gt;
  &lt;li&gt;데이터 엔지니어링 : 데이터 수집과 변환 저장을 하는 데이터 엔지니어링&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ML%20Ops%20d9f536b79cba4b2d8cd26fa30ef0597a/Untitled%206.png&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위 세가지 모두를 통합하여 Production에서 운영 가능한 ML 소프트웨어를 운영하는 프로세스를 ML Ops라고 한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;정리하자면 ML Ops는 머신러닝을 활용하는 소프트웨어를 개발하기 위해 필요한 개발 및 운영 프로세스를 지칭하는 용어라고 보면 된다&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/architecture/mlops-continuous-delivery-and-automation-pipelines-in-machine-learning?hl=ko&quot;&gt;MLOps: 머신러닝의 지속적 배포 및 자동화 파이프라인&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zzsza.github.io/mlops/2018/12/28/mlops/&quot;&gt;머신러닝 오퍼레이션 자동화, MLOps&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/zzsza/mlops-kr-mlops-210605&quot;&gt;MLOps 춘추 전국시대&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://papers.nips.cc/paper/2015/file/86df7dcfd896fcaf2674f757a2463eba-Paper.pdf&quot;&gt;Hidden Technical Debt in Machine Learning Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ml-ops.org/&quot;&gt;https://ml-ops.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eda-ai-lab.tistory.com/13&quot;&gt;EDA란?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.nvidia.com/blog/2020/09/03/what-is-mlops/&quot;&gt;what is ml ops?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Data-Engineering" /><summary type="html">ML Ops</summary></entry><entry><title type="html">Hadoop</title><link href="http://localhost:4000/data-engineering/2021/08/20/Hadoop.html" rel="alternate" type="text/html" title="Hadoop" /><published>2021-08-20T00:00:00+09:00</published><updated>2021-08-20T00:00:00+09:00</updated><id>http://localhost:4000/data-engineering/2021/08/20/Hadoop</id><content type="html" xml:base="http://localhost:4000/data-engineering/2021/08/20/Hadoop.html"></content><author><name></name></author><category term="Data-Engineering" /><summary type="html"></summary></entry><entry><title type="html">ElasticSearch</title><link href="http://localhost:4000/data-engineering/2021/08/20/ElasticSearch.html" rel="alternate" type="text/html" title="ElasticSearch" /><published>2021-08-20T00:00:00+09:00</published><updated>2021-08-20T00:00:00+09:00</updated><id>http://localhost:4000/data-engineering/2021/08/20/ElasticSearch</id><content type="html" xml:base="http://localhost:4000/data-engineering/2021/08/20/ElasticSearch.html"></content><author><name></name></author><category term="Data-Engineering" /><summary type="html"></summary></entry><entry><title type="html">ETL Architecture</title><link href="http://localhost:4000/data-engineering/2021/08/20/ETL-Architecture.html" rel="alternate" type="text/html" title="ETL Architecture" /><published>2021-08-20T00:00:00+09:00</published><updated>2021-08-20T00:00:00+09:00</updated><id>http://localhost:4000/data-engineering/2021/08/20/ETL%20Architecture</id><content type="html" xml:base="http://localhost:4000/data-engineering/2021/08/20/ETL-Architecture.html"></content><author><name></name></author><category term="Data-Engineering" /><summary type="html"></summary></entry><entry><title type="html">EDW</title><link href="http://localhost:4000/data-engineering/2021/08/20/EDW.html" rel="alternate" type="text/html" title="EDW" /><published>2021-08-20T00:00:00+09:00</published><updated>2021-08-20T00:00:00+09:00</updated><id>http://localhost:4000/data-engineering/2021/08/20/EDW</id><content type="html" xml:base="http://localhost:4000/data-engineering/2021/08/20/EDW.html"></content><author><name></name></author><category term="Data-Engineering" /><summary type="html"></summary></entry><entry><title type="html">Apache Nifi</title><link href="http://localhost:4000/data-engineering/2021/08/20/Apache-Nifi.html" rel="alternate" type="text/html" title="Apache  Nifi" /><published>2021-08-20T00:00:00+09:00</published><updated>2021-08-20T00:00:00+09:00</updated><id>http://localhost:4000/data-engineering/2021/08/20/Apache%20Nifi</id><content type="html" xml:base="http://localhost:4000/data-engineering/2021/08/20/Apache-Nifi.html"></content><author><name></name></author><category term="Data-Engineering" /><summary type="html"></summary></entry></feed>